/*
  SCRIPT DE LIMPIEZA Y RE-SUSCRIPCI√ìN
  
  Este script limpia la suscripci√≥n actual y fuerza una nueva suscripci√≥n
  para solucionar problemas cuando OneSignal no reconoce al usuario.
*/

async function limpiarYResuscribir() {
  console.log('\nüßπ === LIMPIEZA Y RE-SUSCRIPCI√ìN ===\n');

  if (!window.OneSignal) {
    alert('OneSignal no est√° disponible. Recarg√° la p√°gina.');
    return;
  }

  try {
    console.log('1Ô∏è‚É£ Obteniendo estado actual...');
    const estadoAntes = {
      playerId: window.OneSignal.User?.PushSubscription?.id,
      optedIn: window.OneSignal.User?.PushSubscription?.optedIn,
      permission: await window.OneSignal.Notifications.permission
    };
    console.log('   Estado antes:', estadoAntes);

    console.log('\n2Ô∏è‚É£ Desuscribiendo del usuario actual...');
    
    // Optar out (desuscribirse)
    if (window.OneSignal.User?.PushSubscription?.optOut) {
      await window.OneSignal.User.PushSubscription.optOut();
      console.log('   ‚úÖ Opt-out exitoso');
    }

    // Esperar un momento
    await new Promise(r => setTimeout(r, 1000));

    console.log('\n3Ô∏è‚É£ Volviendo a suscribir...');
    
    // Optar in (suscribirse)
    if (window.OneSignal.User?.PushSubscription?.optIn) {
      await window.OneSignal.User.PushSubscription.optIn();
      console.log('   ‚úÖ Opt-in exitoso');
    }

    // Esperar un momento para que se genere el nuevo playerId
    await new Promise(r => setTimeout(r, 2000));

    console.log('\n4Ô∏è‚É£ Verificando nuevo estado...');
    const estadoDespues = {
      playerId: window.OneSignal.User?.PushSubscription?.id,
      optedIn: window.OneSignal.User?.PushSubscription?.optedIn,
      permission: await window.OneSignal.Notifications.permission
    };
    console.log('   Estado despu√©s:', estadoDespues);

    if (estadoDespues.playerId && estadoDespues.playerId !== estadoAntes.playerId) {
      console.log('\n‚úÖ ¬°Nuevo playerId generado!');
      console.log('   Anterior:', estadoAntes.playerId);
      console.log('   Nuevo:', estadoDespues.playerId);
      
      // Intentar guardar el nuevo playerId
      console.log('\n5Ô∏è‚É£ Guardando nuevo playerId en el backend...');
      const token = localStorage.getItem('token');
      
      if (token) {
        try {
          const response = await fetch('http://localhost:4000/api/usuarios/notificaciones', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-token': token
            },
            body: JSON.stringify({ playerId: estadoDespues.playerId })
          });
          
          const data = await response.json();
          console.log('   Respuesta:', data);
          
          if (data.ok) {
            alert('‚úÖ ¬°Re-suscripci√≥n exitosa!\n\nNuevo PlayerId: ' + estadoDespues.playerId.substring(0, 20) + '...\n\nAhora deber√≠as aparecer en OneSignal.');
          }
        } catch (err) {
          console.error('   Error guardando:', err);
          alert('PlayerId generado pero no se pudo guardar en el servidor:\n' + estadoDespues.playerId);
        }
      } else {
        alert('Nuevo PlayerId generado:\n' + estadoDespues.playerId + '\n\nPero no hay token de sesi√≥n. Inici√° sesi√≥n y hac√© click en "Activar recordatorios".');
      }
    } else {
      console.log('\n‚ö†Ô∏è  No se gener√≥ un nuevo playerId o es el mismo');
      alert('No se pudo generar un nuevo playerId. Intent√°:\n1. Borrar las notificaciones del sitio en configuraci√≥n del navegador\n2. Recargar la p√°gina\n3. Volver a activar notificaciones');
    }

  } catch (error) {
    console.error('‚ùå Error durante la limpieza:', error);
    alert('Error: ' + error.message);
  }

  console.log('\nüßπ === FIN DE LIMPIEZA ===\n');
}

// Hacer disponible globalmente para poder llamar desde consola
window.limpiarYResuscribir = limpiarYResuscribir;

console.log('üí° Para forzar una re-suscripci√≥n, escrib√≠ en la consola: limpiarYResuscribir()');
